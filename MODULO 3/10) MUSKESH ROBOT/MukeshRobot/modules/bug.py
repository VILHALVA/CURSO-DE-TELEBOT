from datetime import datetime

from pyrogram import filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from MukeshRobot import OWNER_ID as owner_id
from MukeshRobot import SUPPORT_CHAT as log,BOT_NAME,START_IMG
from MukeshRobot import pbot as Client
from MukeshRobot.utils.errors import capture_err


def content(msg: Message) -> [None, str]:
    text_to_return = msg.text

    if msg.text is None:
        return None
    if " " in text_to_return:
        try:
            return msg.text.split(None, 1)[1]
        except IndexError:
            return None
    else:
        return None


@Client.on_message(filters.command("bug"))
@capture_err
async def bug(_, msg: Message):
    if msg.chat.username:
        chat_username = f"@{msg.chat.username}/`{msg.chat.id}`"
    else:
        chat_username = f"·¥© Ä…™·¥†·¥Ä·¥õ·¥á …¢ Ä·¥è·¥ú·¥©/`{msg.chat.id}`"

    bugs = content(msg)
    user_id = msg.from_user.id
    mention = (
        "[" + msg.from_user.first_name + "](tg://user?id=" + str(msg.from_user.id) + ")"
    )
    datetimes_fmt = "%d-%m-%Y"
    datetimes = datetime.utcnow().strftime(datetimes_fmt)

    

    bug_report = f"""
**# ô·¥ú…¢ : ** **tg://user?id={owner_id}**

** Ä·¥á·¥©·¥è Ä·¥õ·¥á·¥Ö  ô è : ** **{mention}**
**·¥ús·¥á Ä …™·¥Ö : ** **{user_id}**
**·¥Ñ ú·¥Ä·¥õ : ** **{chat_username}**

** ô·¥ú…¢ : ** **{bugs}**

**·¥á·¥†·¥á…¥·¥õ s·¥õ·¥Ä·¥ç·¥© : ** **{datetimes}**"""

    if msg.chat.type == "private":
        await msg.reply_text("<b>¬ª ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä …¢ Ä·¥è·¥ú·¥©s.</b>")
        return

    if user_id == owner_id:
        if bugs:
            await msg.reply_text(
                "<b>¬ª ·¥Ä Ä·¥á  è·¥è·¥ú ·¥Ñ·¥è·¥ç·¥á·¥Ö è ·¥ç·¥á ü§£,  è·¥è·¥ú' Ä·¥á ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.</b>",
            )
            return
        else:
            await msg.reply_text("·¥Ñ ú·¥ú·¥ç·¥õ…™ è·¥Ä ·¥è·¥°…¥·¥á Ä!")
    elif user_id != owner_id:
        if bugs:
            await msg.reply_text(
                f"<b> ô·¥ú…¢  Ä·¥á·¥©·¥è Ä·¥õ : {bugs}</b>\n\n"
                "<b>¬ª  ô·¥ú…¢ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á·¥©·¥è Ä·¥õ·¥á·¥Ö ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ !</b>",
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data=f"close_reply")]]
                ),
            )
            await Client.send_photo(
                log,
                photo=START_IMG,
                caption=f"{bug_report}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚Ä¢ ·¥†…™·¥á·¥°  ô·¥ú…¢ ‚Ä¢", url=f"{msg.link}")],
                        [
                            InlineKeyboardButton(
                                "‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close_send_photo"
                            )
                        ],
                    ]
                ),
            )
        else:
            await msg.reply_text(
                f"<b>¬ª …¥·¥è  ô·¥ú…¢ ·¥õ·¥è  Ä·¥á·¥©·¥è Ä·¥õ !</b>",
            )


@Client.on_callback_query(filters.regex("close_reply"))
async def close_reply(msg, CallbackQuery):
    await CallbackQuery.message.delete()


@Client.on_callback_query(filters.regex("close_send_photo"))
async def close_send_photo(_, CallbackQuery):
    is_Admin = await Client.get_chat_member(
        CallbackQuery.message.chat.id, CallbackQuery.from_user.id
    )
    if not is_Admin.can_delete_messages:
        return await CallbackQuery.answer(
            " è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ  ú·¥Ä·¥†·¥á  Ä…™…¢ ú·¥õs ·¥õ·¥è ·¥Ñ ü·¥ès·¥á ·¥õ ú…™s.", show_alert=True
        )
    else:
        await CallbackQuery.message.delete()


__help__ = """
*“ì·¥è Ä  Ä·¥á·¥©·¥è Ä·¥õ…™…¥…¢ ·¥Ä  ô·¥ú…¢ *
 ‚ùç /bug *:* ·¥õ·¥è  Ä·¥á·¥©·¥è Ä·¥õ ·¥Ä  ô·¥ú…¢ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.
"""
__mod_name__ = "B·¥ú…¢"
