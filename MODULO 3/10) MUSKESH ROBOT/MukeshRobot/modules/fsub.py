from telethon import Button, events, types
from telethon.errors import ChatAdminRequiredError
from telethon.errors.rpcerrorlist import UserNotParticipantError
from telethon.tl.functions.channels import GetParticipantRequest

from MukeshRobot import BOT_ID
from MukeshRobot import DRAGONS as DEVS
from MukeshRobot import OWNER_ID
from MukeshRobot import telethn as Mukesh
from MukeshRobot.events import Mukeshinline
from MukeshRobot.events import register as Mukeshbot
from MukeshRobot.modules.no_sql import fsub_db as db


async def is_admin(chat_id, user_id):
    try:
        p = await Mukesh(GetParticipantRequest(chat_id, user_id))
    except UserNotParticipantError:
        return False
    if isinstance(p.participant, types.ChannelParticipantAdmin) or isinstance(
        p.participant, types.ChannelParticipantCreator
    ):
        return True
    else:
        return False


async def participant_check(channel, user_id):
    try:
        await Mukesh(GetParticipantRequest(channel, int(user_id)))
        return True
    except UserNotParticipantError:
        return False
    except:
        return False


@Mukeshbot(pattern="^/(fsub|Fsub|forcesubscribe|Forcesub|forcesub|Forcesubscribe) ?(.*)")
async def fsub(event):
    if event.is_private:
        return
    if event.is_group:
        perm = await event.client.get_permissions(event.chat_id, event.sender_id)
        if not perm.is_admin:
            return await event.reply(" è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥è ·¥õ ú…™s.")
        if not perm.is_creator:
            return await event.reply(
                "‚ùó <b>…¢ Ä·¥è·¥ú·¥ò ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö</b> \n<i> è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è  ô·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ.</i>",
                parse_mode="html",
            )
    try:
        channel = event.text.split(None, 1)[1]
    except IndexError:
        channel = None
    if not channel:
        chat_db = db.fs_settings(event.chat_id)
        if not chat_db:
            await event.reply(
                "<b>‚ùå “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ.</b>", parse_mode="HTML"
            )
        else:
            await event.reply(
                f"“ì·¥è Ä·¥Ñ·¥ás·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è <b>·¥á…¥·¥Ä ô ü·¥á·¥Ö</b>. ·¥ús·¥á Äs ·¥Ä Ä·¥á “ì·¥è Ä·¥Ñ·¥á·¥Ö ·¥õ·¥è ·¥ä·¥è…™…¥ <b>@{chat_db.channel}</b> ·¥õ·¥è s·¥ò·¥á·¥Ä·¥ã  ú·¥á Ä·¥á.",
                parse_mode="html",
            )
    elif channel in ["on", "yes", "y"]:
        await event.reply("‚ùó·¥ò ü·¥á·¥Äs·¥á s·¥ò·¥á·¥Ñ…™“ì è ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á.")
    elif channel in ["off", "no", "n"]:
        await event.reply("**‚ùå “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è.**")
        db.disapprove(event.chat_id)
    else:
        try:
            channel_entity = await event.client.get_entity(channel)
        except:
            return await event.reply(
                "‚ùó<b>…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö.</b>", parse_mode="html"
            )
        channel = channel_entity.username
        try:
            if not channel_entity.broadcast:
                return await event.reply("·¥õ ú·¥Ä·¥õ's …¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü.")
        except:
            return await event.reply("·¥õ ú·¥Ä·¥õ's …¥·¥è·¥õ ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü.")
        if not await participant_check(channel, BOT_ID):
            return await event.reply(
                f"‚ùó**…¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü**\nI ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á [·¥Ñ ú·¥Ä…¥…¥·¥á ü](https://t.me/{channel}). ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Äs ·¥Ä ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥è Ä·¥Ö·¥á Ä ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á “ì·¥è Ä·¥Ñ·¥ás·¥ú ôs·¥Ñ Ä…™ ô·¥á.",
                link_preview=False,
            )
        db.add_channel(event.chat_id, str(channel))
        await event.reply(f"‚úÖ **“ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö** to @{channel}.")


@Mukesh.on(events.NewMessage())
async def fsub_n(e):
    if not db.fs_settings(e.chat_id):
        return
    if e.is_private:
        return
    if e.chat.admin_rights:
        if not e.chat.admin_rights.ban_users:
            return
    else:
        return
    if not e.from_id:
        return
    if (
        await is_admin(e.chat_id, e.sender_id)
        or e.sender_id in DEVS
        or e.sender_id == OWNER_ID
    ):
        return
    channel = (db.fs_settings(e.chat_id)).get("channel")
    try:
        check = await participant_check(channel, e.sender_id)
    except ChatAdminRequiredError:
        return
    if not check:
        buttons = [Button.url("·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü", f"t.me/{channel}")], [
            Button.inline("·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥ç·¥á", data="fs_{}".format(str(e.sender_id)))
        ]
        txt = f'<b><a href="tg://user?id={e.sender_id}">{e.sender.first_name}</a></b>,  è·¥è·¥ú  ú·¥Ä·¥†·¥á <b>…¥·¥è·¥õ s·¥ú ôs·¥Ñ Ä…™ ô·¥á·¥Ö</b> ·¥õ·¥è ·¥è·¥ú Ä <b><a href="t.me/{channel}">·¥Ñ ú·¥Ä…¥…¥·¥á ü</a></b>  è·¥á·¥õ‚ùó.·¥ò ü·¥á·¥Äs·¥á <b><a href="t.me/{channel}">·¥ä·¥è…™…¥</a></b> ·¥Ä…¥·¥Ö <b>·¥ò Ä·¥áss ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°</b> ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á  è·¥è·¥ú Äs·¥á ü“ì.'
        await e.reply(txt, buttons=buttons, parse_mode="html", link_preview=False)
        await e.client.edit_permissions(e.chat_id, e.sender_id, send_messages=False)


@Mukeshinline(pattern=r"fs(\_(.*))")
async def unmute_fsub(event):
    user_id = int(((event.pattern_match.group(1)).decode()).split("_", 1)[1])
    if not event.sender_id == user_id:
        return await event.answer("·¥õ ú…™s …™s …¥·¥è·¥õ ·¥ç·¥á·¥Ä…¥·¥õ “ì·¥è Ä  è·¥è·¥ú.", alert=True)
    channel = (db.fs_settings(event.chat_id)).get("channel")
    try:
        check = await participant_check(channel, user_id)
    except ChatAdminRequiredError:
        check = False
        return
    if not check:
        return await event.answer(
            " è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ, ·¥õ·¥è …¢·¥á·¥õ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö!", alert=True
        )
    try:
        await event.client.edit_permissions(event.chat_id, user_id, send_messages=True)
    except ChatAdminRequiredError:
        pass
    await event.delete()


__mod_name__ = "“ì-s·¥ú ô"

__help__="""
*“ì·¥è Ä·¥Ñ·¥á Íú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á:*

   ‚Ä¢‚û• *·¥ç·¥ú·¥ã·¥ás ú Ä·¥è ô·¥è·¥õ ·¥Ñ·¥Ä…¥ ·¥ç·¥ú·¥õ·¥á ·¥ç·¥á·¥ç ô·¥á ÄÍú± ·¥° ú·¥è ·¥Ä Ä·¥á …¥·¥è·¥õ Íú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á·¥Ö  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è Íú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á*
   ‚Ä¢‚û• ·¥° ú·¥á…¥ ·¥á…¥·¥Ä ô ü·¥á·¥Ö …™ ·¥°…™ ü ü ·¥ç·¥ú·¥õ·¥á ·¥ú…¥Íú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á·¥Ö ·¥ç·¥á·¥ç ô·¥á ÄÍú± ·¥Ä…¥·¥Ö Íú± ú·¥è·¥° ·¥õ ú·¥á·¥ç ·¥Ä ·¥ú…¥·¥ç·¥ú·¥õ·¥á  ô·¥ú·¥õ·¥õ·¥è…¥. ·¥° ú·¥á…¥ ·¥õ ú·¥á è ·¥ò Ä·¥áÍú±Íú±·¥á·¥Ö ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥ …™ ·¥°…™ ü ü ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á·¥ç

   ‚Ä¢‚û• *Íú±·¥á·¥õ·¥ú·¥ò*
   ‚Ä¢‚û• [·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥ÄÍú± ·¥Ä·¥Ö·¥ç…™…¥](https://t.me/groupcontrollertgbot?startgroup=new)
   ‚Ä¢‚û• [·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥ your ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ÄÍú± ·¥Ä·¥Ö·¥ç…™…¥](https://t.me/groupcontrollertgbot?startgroup=new)
 
    *·¥Ñ·¥è·¥ç·¥ç·¥ç·¥Ä…¥·¥ÖÍú±*
   ‚Ä¢‚û• /fsub channel username - ·¥õ·¥è ·¥õ·¥ú Ä…¥ ·¥è…¥ ·¥Ä…¥·¥Ö s·¥á·¥õ·¥ú·¥ò ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü.
   ‚Ä¢‚û• /fsub off - ·¥õ·¥è ·¥õ·¥ú Ä…¥ ·¥è“ì “ì·¥è Ä·¥Ñ·¥áÍú±·¥ú ôÍú±·¥Ñ Ä…™ ô·¥á..
   üí° …™“ì  è·¥è·¥ú ·¥Ö…™Íú±·¥Ä ô ü·¥á “ìÍú±·¥ú ô,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è Íú±·¥á·¥õ ·¥Ä…¢·¥Ä…™…¥ “ì·¥è Ä ·¥°·¥è Ä·¥ã…™…¥…¢ /fsub channel username
 
"""

